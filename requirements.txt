import streamlit as st
from datetime import datetime
import json, io

# ---------------------------------
# Page Setup
# ---------------------------------
st.set_page_config(
    page_title="🎓 Study Style Wizard",
    page_icon="📘",
    layout="wide",
)

CSS = """
<style>
.huge{font-size:clamp(32px,6vw,66px);font-weight:900;letter-spacing:.3px;
  background:linear-gradient(90deg,#0ea5e9,#a855f7,#f59e0b);
  -webkit-background-clip:text;background-clip:text;color:transparent;}
.card{background:rgba(255,255,255,.06);border:1px solid rgba(255,255,255,.12);
  border-radius:18px;padding:16px 18px;box-shadow:0 10px 26px rgba(0,0,0,.18)}
.pill{display:inline-flex;gap:8px;align-items:center;padding:6px 12px;border-radius:999px;
  background:rgba(255,255,255,.08);border:1px solid rgba(255,255,255,.18);margin:6px 6px 0 0}
.small{font-size:13px;opacity:.82}
.block-container{padding-top:1rem}
hr{border:none;height:1px;background:linear-gradient(90deg,transparent,#ffffff33,transparent);margin:8px 0}
</style>
"""

st.markdown(CSS, unsafe_allow_html=True)

# ---------------------------------
# Helpers
# ---------------------------------

def pill(txt: str) -> str:
    return f"<span class='pill'>{txt}</span>"

METHODS = {
    "Pomodoro ⏱️": {
        "desc": "25분 집중 + 5분 휴식, 짧은 스프린트로 몰입도 유지",
        "when": "시간이 쪼개지고 산만할 때",
        "how": ["타이머 켜기 (25/5)", "4회 반복 후 15~20분 긴 휴식", "알림 차단 모드"],
    },
    "Deep Work 🧠": {
        "desc": "방해 요소를 제거하고 60~90분 깊게 몰입",
        "when": "난도 높은 과제·문제 풀이",
        "how": ["폰↓, 탭 최소화", "문서/문제 1개만", "끝나고 회고 3줄"],
    },
    "Spaced Repetition 🔁": {
        "desc": "간격 두고 반복 복습으로 장기기억 강화",
        "when": "암기 과목, 개념 반복",
        "how": ["1일·3일·7일·14일 복습", "짧게 자주", "오답/헷갈림 태깅"],
    },
    "Active Recall ❓": {
        "desc": "책 덮고 스스로 떠올리기/설명하기",
        "when": "개념 확인, 시험 대비",
        "how": ["키워드만 보고 말/쓰기", "스스로 퀴즈 만들기", "정답 맞춘 뒤 근거 확인"],
    },
    "Interleaving 🔀": {
        "desc": "유사 과목/유형을 섞어 학습 전이 촉진",
        "when": "문제풀이 스킬 향상",
        "how": ["단원 A→B→A→C로 교차", "쉬운/어려운 난도 섞기", "패턴 비교 메모"],
    },
    "Feynman ✍️": {
        "desc": "누군가에게 가르치듯 간단한 언어로 설명",
        "when": "깊은 이해 필요",
        "how": ["A4 1장에 쉬운 말로 설명", "비유 만들기", "모르는 부분 표시 후 다시 학습"],
    },
}

# 점수 가중치 규칙 (간단, 해석 가능)
RULES = [
    # (condition, {method: score_delta})
    (lambda a: a["time_block"] <= 35, {"Pomodoro ⏱️": 12}),
    (lambda a: a["time_block"] >= 60, {"Deep Work 🧠": 14}),
    (lambda a: a["noise"] >= 70, {"Pomodoro ⏱️": 6, "Deep Work 🧠": 8}),
    (lambda a: a["exam_near"], {"Active Recall ❓": 10, "Spaced Repetition 🔁": 8}),
    (lambda a: a["memory_heavy"] >= 60, {"Spaced Repetition 🔁": 12, "Active Recall ❓": 6}),
    (lambda a: a["concept_heavy"] >= 60, {"Feynman ✍️": 12, "Deep Work 🧠": 6}),
    (lambda a: a["mix_like"] >= 60, {"Interleaving 🔀": 12}),
    (lambda a: a["night_owl"] >= 60, {"Deep Work 🧠": 5}),
]

BASE = {k: 50 for k in METHODS.keys()}

# ---------------------------------
# Header
# ---------------------------------
left, right = st.columns([0.72, 0.28])
with left:
    st.markdown("<div class='huge'>Study Style Wizard 📘✨</div>", unsafe_allow_html=True)
    st.markdown("**공부 성향** 몇 가지를 선택하면, 나에게 맞는 **공부법 TOP 3**를 추천해줘요! 🌈🧑‍🎓")
with right:
    st.metric("Today", datetime.now().strftime("%Y-%m-%d"))

st.write("")

# ---------------------------------
# Sidebar – Inputs
# ---------------------------------
with st.sidebar:
    st.markdown("## 🎛️ 설정")
    st.markdown("학습 환경과 목표를 알려주세요 ✍️")
    time_block = st.slider("한 번에 집중 가능한 시간(분) ⏱️", 10, 120, 35, step=5)
    noise = st.slider("산만함 정도(알림/잡생각) 📱", 0, 100, 60)
    memory_heavy = st.slider("암기 비중(단어/용어 등) 🧠", 0, 100, 50)
    concept_heavy = st.slider("개념 이해 비중(이론/증명 등) 📚", 0, 100, 50)
    mix_like = st.slider("문제 유형 섞어 풀기 선호도 🔀", 0, 100, 40)
    night_owl = st.slider("저녁형(야행성) 성향 🌙", 0, 100, 40)
    exam_near = st.checkbox("시험이 일주일 이내예요 📆", value=False)

    st.markdown("---")
    run = st.button("✨ 내 공부법 추천받기")

answers = {
    "time_block": time_block,
    "noise": noise,
    "memory_heavy": memory_heavy,
    "concept_heavy": concept_heavy,
    "mix_like": mix_like,
    "night_owl": night_owl,
    "exam_near": exam_near,
}

# ---------------------------------
# Compute Recommendation
# ---------------------------------
score = BASE.copy()
for cond, updates in RULES:
    try:
        if cond(answers):
            for k, v in updates.items():
                score[k] += v
    except Exception:
        pass

ranking = sorted(score.items(), key=lambda x: x[1], reverse=True)

# ---------------------------------
# Output
# ---------------------------------
st.markdown("### 🌟 추천 공부법 TOP 3")
cols = st.columns(3)
for i, (name, sc) in enumerate(ranking[:3]):
    with cols[i]:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.markdown(f"#### {name}")
        st.markdown(f"<div class='small'>적합도 점수 ⭐ {round(sc,1)}</div>", unsafe_allow_html=True)
        st.markdown("<hr>")
        st.markdown(f"{pill('요약')} {METHODS[name]['desc']}", unsafe_allow_html=True)
        st.markdown(f"{pill('언제 좋을까')} {METHODS[name]['when']}", unsafe_allow_html=True)
        st.markdown("**실행 팁**")
        st.markdown("\n".join([f"- {tip}" for tip in METHODS[name]["how"]]))
        st.markdown("</div>", unsafe_allow_html=True)

# Personalized plan block
st.markdown("### 🗓️ 7일 액션 플랜")
plan_col1, plan_col2 = st.columns([0.6, 0.4])
sel1, sel2, sel3 = [k for k,_ in ranking[:3]]
with plan_col1:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("**핵심 루틴**")
    st.markdown(
        f"- {pill(sel1)} 30~90분 핵심 세션 1회\n\n"+
        f"- {pill(sel2)} 짧은 세션 2회\n\n"+
        f"- {pill(sel3)} 과목/유형 교차 20~30분", unsafe_allow_html=True)
    st.markdown("**일일 체크리스트**")
    st.markdown("- 방해요소 차단(알림 OFF)\n- 세션 후 3줄 회고\n- 오답/헷갈린 개념 태깅")
    st.markdown("</div>", unsafe_allow_html=True)

with plan_col2:
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.markdown("**오늘의 환경 요약**")
    st.markdown(
        " ".join(
            pill(t) for t in [
                f"⏱️ {time_block}m", f"📱산만함 {noise}", f"🧠암기 {memory_heavy}",
                f"📚개념 {concept_heavy}", f"🔀교차 {mix_like}", f"🌙야행 {night_owl}",
                ("📆시험 임박" if exam_near else "여유 있음 🧘")
            ]
        ),
        unsafe_allow_html=True,
    )
    st.markdown("</div>", unsafe_allow_html=True)

# Celebrations & Export
if run:
    st.balloons()

snapshot = {
    "timestamp": datetime.now().isoformat(timespec="seconds"),
    "answers": answers,
    "top3": [{"method": k, "score": round(v,1)} for k, v in ranking[:3]],
    "plan": {
        "routine": [sel1, sel2, sel3],
        "checklist": ["알림 OFF", "세션 후 3줄 회고", "오답 태깅"],
    },
}

buf = io.BytesIO(json.dumps(snapshot, ensure_ascii=False, indent=2).encode("utf-8"))
st.download_button(
    "📥 내 맞춤 결과 JSON 다운로드",
    data=buf.getvalue(),
    file_name="study_style_result.json",
    mime="application/json",
)

st.markdown(
    "<div class='small'>⚠️ 참고: 공부법은 도구일 뿐, 상황과 과목에 맞게 유연하게 조합해보세요. 꾸준함이 왕관입니다 👑</div>",
    unsafe_allow_html=True,
)

